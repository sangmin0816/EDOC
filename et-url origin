[33mcommit 3dccf6bff30d590fb7f560188a60501473de06b6[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31mEDOC10/master[m[33m)[m
Author: Rabi <sangmin990816@gmail.com>
Date:   Mon Dec 20 01:56:13 2021 +0900

    1220 update

[1mdiff --git a/c1117/q11256.java b/c1117/q11256.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f9b38bc[m
[1m--- /dev/null[m
[1m+++ b/c1117/q11256.java[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m[32mpackage c1117;[m
[32m+[m[32m// 동아리 문제 (선택 여부는 아직 모름)[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class q11256 { // 사탕 acmicpc.net/problem/11256[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Scanner sc = new Scanner(System.in);[m
[32m+[m[32m        int T = sc.nextInt(); // 테스트 케이스[m
[32m+[m[32m        for(int i=0; i<T; i++){[m
[32m+[m[32m            int J = sc.nextInt(); // 사탕 갯수[m
[32m+[m[32m            int N = sc.nextInt(); // 상자 갯수[m
[32m+[m[32m            int[] arr = new int[N];[m
[32m+[m[32m            int ans = 0;[m
[32m+[m
[32m+[m[32m            for(int j=0; j<N; j++){[m
[32m+[m[32m                //상자 가로 세로 크기[m
[32m+[m[32m                int R = sc.nextInt();[m
[32m+[m[32m                int C = sc.nextInt();[m
[32m+[m[32m                arr[j]=R*C; // 각 상자별 넓이를 배열에 추가[m
[32m+[m[32m            }[m
[32m+[m[41m            [m
[32m+[m[32m            Arrays.sort(arr); // 오름차순 정렬[m
[32m+[m[41m            [m
[32m+[m[32m            for(int j=N-1; j>=0; j--){ // 넓이가 큰 상자부터 집어넣기[m
[32m+[m[32m                J-=arr[j];[m
[32m+[m[32m                ans++;[m
[32m+[m[32m                if(J<=0){[m
[32m+[m[32m                    System.out.println(ans);[m
[32m+[m[32m                    break;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        sc.close();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// 어려웠던 점. 문제 이해를 못해서 각 상자별로 N개씩 주어지는 줄 알았다.[m
\ No newline at end of file[m
[1mdiff --git a/q1197.java b/c1117/q1197.java[m
[1msimilarity index 99%[m
[1mrename from q1197.java[m
[1mrename to c1117/q1197.java[m
[1mindex fe45d98..bc209de 100644[m
[1m--- a/q1197.java[m
[1m+++ b/c1117/q1197.java[m
[36m@@ -1,3 +1,4 @@[m
[32m+[m[32mpackage EDOC10;[m
 import java.util.*;[m
 [m
 class Edge{[m
[1mdiff --git a/q1388.java b/c1117/q1388.java[m
[1msimilarity index 98%[m
[1mrename from q1388.java[m
[1mrename to c1117/q1388.java[m
[1mindex 7cbc1d5..96dc21c 100644[m
[1m--- a/q1388.java[m
[1m+++ b/c1117/q1388.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-[m
[32m+[m[32mpackage EDOC10;[m
 [m
 import java.util.*;[m
 [m
[1mdiff --git a/q14655.java b/c1117/q14655.java[m
[1msimilarity index 98%[m
[1mrename from q14655.java[m
[1mrename to c1117/q14655.java[m
[1mindex a3e61eb..758c418 100644[m
[1m--- a/q14655.java[m
[1m+++ b/c1117/q14655.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-[m
[32m+[m[32mpackage EDOC10;[m
 [m
 import java.util.*;[m
 [m
[1mdiff --git a/c1117/q1931.java b/c1117/q1931.java[m
[1mnew file mode 100644[m
[1mindex 0000000..172d545[m
[1m--- /dev/null[m
[1m+++ b/c1117/q1931.java[m
[36m@@ -0,0 +1,50 @@[m
[32m+[m[32mpackage c1117;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class q1931 { // 회의실 배정 https://www.acmicpc.net/problem/1931[m
[32m+[m[32m    public static class meeting { // 회의 객체[m
[32m+[m[32m        int start; // 회의 시작 시간[m
[32m+[m[32m        int end; // 회의 끝 시간[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Scanner sc = new Scanner(System.in);[m
[32m+[m[32m        int N = sc.nextInt(); // 총 예약[m
[32m+[m[32m        ArrayList<meeting> marr = new ArrayList<meeting>(); // 예약 리스트[m
[32m+[m[32m        int ans = 0;[m
[32m+[m
[32m+[m[32m        for(int i=0; i<N; i++){ // 예약 리스트 생성[m
[32m+[m[32m            meeting temp = new meeting();[m
[32m+[m[32m            temp.start = sc.nextInt();[m
[32m+[m[32m            temp.end = sc.nextInt();[m
[32m+[m[32m            marr.add(temp);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        Comparator<meeting> eComparator = new Comparator<meeting>() {[m
[32m+[m[32m            public int compare(meeting m1, meeting m2){[m
[32m+[m[32m                if(m1.end==m2.end) // end 시간이 같으면 start따라 정렬 필요[m
[32m+[m[32m                    return m1.start-m2.start;[m
[32m+[m[32m                return m1.end - m2.end;[m
[32m+[m[32m            }[m
[32m+[m[32m        };[m
[32m+[m
[32m+[m[32m        Collections.sort(marr, eComparator); // 끝, 시작 시간 순으로 오름차순 정렬[m
[32m+[m
[32m+[m[32m        int i=0;[m
[32m+[m[32m        while(!marr.isEmpty()){[m
[32m+[m[32m            meeting temp = marr.remove(0); // end 최소면서 start 최소인 예약[m
[32m+[m[32m            if(temp.start>=i){ // 확정 예약과 겹치지 않으면[m
[32m+[m[32m                ans++;[m
[32m+[m[32m                i=temp.end; // 예약 확정[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        System.out.println(ans);[m
[32m+[m
[32m+[m[32m        sc.close();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// 어려웠던 점: 끝 시간이 같을 경우 시작 시간을 정렬해야 하는 걸 빼먹어서 한참 해맸다.[m
[32m+[m[32m// java의 정렬 함수에 대해 많이 배울 수 있었다.[m
\ No newline at end of file[m
[1mdiff --git a/c1124/q14594.java b/c1124/q14594.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4631c80[m
[1m--- /dev/null[m
[1m+++ b/c1124/q14594.java[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mpackage c1124;[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class q14594 {[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Scanner sc = new Scanner(System.in);[m
[32m+[m
[32m+[m[32m        int N = sc.nextInt();[m
[32m+[m[32m        int M = sc.nextInt();[m
[32m+[m[32m        HashSet<Integer> room = new HashSet<>(); // Set, 중복 제거[m
[32m+[m
[32m+[m[32m        for(int i=0; i<M; i++){[m
[32m+[m[32m            int x = sc.nextInt();[m
[32m+[m[32m            int y = sc.nextInt();[m
[32m+[m[32m            for(int j=x; j<y; j++){[m
[32m+[m[32m                room.add(j);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        System.out.println(N-room.size());[m
[32m+[m
[32m+[m[32m        sc.close();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/c1124/q17197.java b/c1124/q17197.java[m
[1mnew file mode 100644[m
[1mindex 0000000..10e21fc[m
[1m--- /dev/null[m
[1m+++ b/c1124/q17197.java[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32mpackage c1124;[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class q17197 {[m
[32m+[m[32m    public static int parent[];[m
[32m+[m[41m    [m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Scanner sc = new Scanner(System.in);[m
[32m+[m
[32m+[m[32m        int N = sc.nextInt()+1;[m
[32m+[m[32m        int M = sc.nextInt()+1;[m
[32m+[m[32m        parent = new int[N];[m
[32m+[m[32m        int[][] coo = new int[N][2];[m
[32m+[m[41m        [m
[32m+[m[32m        for(int i=1; i<N; i++){[m
[32m+[m[32m            coo[i][0]=sc.nextInt();[m
[32m+[m[32m            coo[i][1]=sc.nextInt();[m
[32m+[m[32m        }[m
[32m+[m[41m            [m
[32m+[m[32m        for(int i=1; i<M; i++){[m
[32m+[m[32m            int a = sc.nextInt();[m
[32m+[m[32m            int b = sc.nextInt();[m
[32m+[m[32m            if(Find(a)!=Find(b))[m
[32m+[m[32m                Union(a, b);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        sc.close();[m
[32m+[m[32m    }[m
[32m+[m[32m    static int Find(int C){[m
[32m+[m[32m        if(parent[C]==0)[m
[32m+[m[32m            return C;[m
[32m+[m[32m        return Find(parent[C]);[m[41m [m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static void Union(int A, int B){[m
[32m+[m[32m        int rootA = Find(A);[m
[32m+[m[32m        int rootB = Find(B);[m
[32m+[m[32m        if(rootA!=rootB)[m
[32m+[m[32m            parent[rootA]=rootB;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/c1124/q4386.java b/c1124/q4386.java[m
[1mnew file mode 100644[m
[1mindex 0000000..cdb9dbe[m
[1m--- /dev/null[m
[1m+++ b/c1124/q4386.java[m
[36m@@ -0,0 +1,88 @@[m
[32m+[m[32mpackage c1124;[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class q4386 {[m
[32m+[m[32m    private static int[] parent;[m
[32m+[m[32m    private static ArrayList<Star> tmpList = new ArrayList<>();[m
[32m+[m[32m    private static ArrayList<Star> starList = new ArrayList<>();[m
[32m+[m[32m    private static float answer = 0;[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Scanner sc = new Scanner(System.in);[m
[32m+[m[32m        int n = sc.nextInt(); // 별의 갯수[m
[32m+[m[32m        for (int i = 0; i < n; i++) { // 각 별의 좌표[m
[32m+[m[32m            double x = sc.nextDouble();[m
[32m+[m[32m            double y = sc.nextDouble();[m
[32m+[m[32m            tmpList.add(new Star(x, y, 0f)); // 일단 가중치 0으로 초기화[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        parent = new int[n];[m
[32m+[m[32m        for (int i = 0; i < n; i++) { // 자기 자신으로 루트노드 초기화[m
[32m+[m[32m            parent[i] = i;[m[41m [m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        // 각 별 간의 간선 추가된 Star 배열[m
[32m+[m[32m        for (int i = 0; i < tmpList.size() - 1; i++) {[m
[32m+[m[32m            Star star1 = tmpList.get(i);[m
[32m+[m[32m            double x1 = star1.x;[m
[32m+[m[32m            double y1 = star1.y;[m
[32m+[m[32m            for (int j = i + 1; j < tmpList.size(); j++) {[m
[32m+[m[32m                Star star2 = tmpList.get(j);[m
[32m+[m[32m                double x2 = star2.x;[m
[32m+[m[32m                double y2 = star2.y;[m
[32m+[m[32m                double weight = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));[m
[32m+[m[32m                starList.add(new Star(i, j, weight));[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // starList 오름차순 정렬[m
[32m+[m[32m        Collections.sort(starList);[m
[32m+[m[32m        for (int i = 0; i < starList.size(); i++) {[m
[32m+[m[32m            Star star = starList.get(i);[m
[32m+[m[32m            if (!isSameParent((int) star.x, (int) star.y)) {[m
[32m+[m[32m                answer += star.weight;[m
[32m+[m[32m                union((int) star.x, (int) star.y); //연결[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println(Math.round(answer*100)/100.0);[m
[32m+[m
[32m+[m[32m        sc.close();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static void union(int x, int y) {[m
[32m+[m[32m        x = find(x);[m
[32m+[m[32m        y = find(y);[m
[32m+[m[32m        if (x != y) {[m
[32m+[m[32m            if (x < y) parent[y] = x;[m
[32m+[m[32m            else parent[x] = y;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static int find(int x) {[m
[32m+[m[32m        if (parent[x] == x) return x;[m
[32m+[m[32m        else return parent[x] = find(parent[x]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static boolean isSameParent(int x, int y) {[m
[32m+[m[32m        x = find(x);[m
[32m+[m[32m        y = find(y);[m
[32m+[m[32m        return x == y;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Star implements Comparable<Star> {[m
[32m+[m[32m        double x; //처음엔 x좌표로 사용하고 이후 시작 지점으로 사용[m
[32m+[m[32m        double y;[m
[32m+[m[32m        double weight;[m
[32m+[m
[32m+[m[32m        public Star(double x, double y, double weight) {[m
[32m+[m[32m            this.x = x;[m
[32m+[m[32m            this.y = y;[m
[32m+[m[32m            this.weight = weight;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public int compareTo(Star o) {[m
[32m+[m[32m            return Double.compare(weight, o.weight);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/c1124/q4386copy.java b/c1124/q4386copy.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ad7f76f[m
[1m--- /dev/null[m
[1m+++ b/c1124/q4386copy.java[m
[36m@@ -0,0 +1,96 @@[m
[32m+[m[32mpackage c1124;[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class q4386copy {[m
[32m+[m[32m    private static int[] parent;[m
[32m+[m[32m    private static ArrayList<Coordinates> tmpList = new ArrayList<>();[m
[32m+[m[32m    private static ArrayList<Star> starList = new ArrayList<>();[m
[32m+[m[32m    private static float answer = 0;[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Scanner sc = new Scanner(System.in);[m
[32m+[m[32m        int n = sc.nextInt(); // 별의 갯수[m
[32m+[m[32m        for (int i = 0; i < n; i++) { // 각 별의 좌표[m
[32m+[m[32m            double x = sc.nextDouble();[m
[32m+[m[32m            double y = sc.nextDouble();[m
[32m+[m[32m            tmpList.add(new Coordinates(x, y)); // 일단 가중치 0으로 초기화[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        parent = new int[n];[m
[32m+[m[32m        for (int i = 0; i < n; i++) { // 자기 자신으로 루트노드 초기화[m
[32m+[m[32m            parent[i] = i;[m[41m [m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        // 각 별 간의 간선 추가된 Star 배열[m
[32m+[m[32m        for (int i = 0; i < tmpList.size() - 1; i++) {[m
[32m+[m[32m            Coordinates star1 = tmpList.get(i);[m
[32m+[m[32m            double x1 = star1.x;[m
[32m+[m[32m            double y1 = star1.y;[m
[32m+[m[32m            for (int j = i + 1; j < tmpList.size(); j++) {[m
[32m+[m[32m                Coordinates star2 = tmpList.get(j);[m
[32m+[m[32m                double x2 = star2.x;[m
[32m+[m[32m                double y2 = star2.y;[m
[32m+[m[32m                double weight = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));[m
[32m+[m[32m                starList.add(new Star(i, j, weight));[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // 간선 가중치 따라 starList 오름차순 정렬[m
[32m+[m[32m        Collections.sort(starList);[m
[32m+[m[32m        for (int i = 0; i < starList.size(); i++) {[m
[32m+[m[32m            Star star = starList.get(i);[m
[32m+[m[32m            if (!isSameParent((int) star.a, (int) star.b)) {[m
[32m+[m[32m                answer += star.weight;[m
[32m+[m[32m                union((int) star.a, (int) star.b); //연결[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        System.out.printf("%.2f", answer);[m
[32m+[m
[32m+[m[32m        sc.close();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static void union(int x, int y) {[m
[32m+[m[32m        x = find(x);[m
[32m+[m[32m        y = find(y);[m
[32m+[m[32m        if (x != y) {[m
[32m+[m[32m            if (x < y) parent[y] = x;[m
[32m+[m[32m            else parent[x] = y;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static int find(int x) {[m
[32m+[m[32m        if (parent[x] == x) return x;[m
[32m+[m[32m        else return parent[x] = find(parent[x]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static boolean isSameParent(int x, int y) {[m
[32m+[m[32m        x = find(x);[m
[32m+[m[32m        y = find(y);[m
[32m+[m[32m        return x == y;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Coordinates{[m
[32m+[m[32m        public Coordinates(double x2, double y2) {[m
[32m+[m[32m        }[m
[32m+[m[32m        double x;[m
[32m+[m[32m        double y;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Star implements Comparable<Star> { // 간선 배열[m
[32m+[m[32m        double a;[m
[32m+[m[32m        double b;[m
[32m+[m[32m        double weight;[m
[32m+[m
[32m+[m[32m        public Star(double x, double y, double weight) {[m
[32m+[m[32m            this.a = x;[m
[32m+[m[32m            this.b = y;[m
[32m+[m[32m            this.weight = weight;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public int compareTo(Star o) { // 간선 가중치에 따라 오름차순 정렬[m
[32m+[m[32m            return Double.compare(weight, o.weight);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/d1114/q10162.java b/d1114/q10162.java[m
[1mindex 973ff84..017a8ff 100644[m
[1m--- a/d1114/q10162.java[m
[1m+++ b/d1114/q10162.java[m
[36m@@ -1,4 +1,5 @@[m
[31m-package d1114;[m
[32m+[m[32mpackage EDOC10.d1114;[m
[32m+[m
 import java.util.*; [m
 [m
 public class q10162 {[m
[1mdiff --git a/d1114/q1434.java b/d1114/q1434.java[m
[1mindex 3afd980..4e139ef 100644[m
[1m--- a/d1114/q1434.java[m
[1m+++ b/d1114/q1434.java[m
[36m@@ -1,4 +1,5 @@[m
[31m-package d1114;[m
[32m+[m[32mpackage EDOC10.d1114;[m
[32m+[m
 import java.util.*;[m
 [m
 public class q1434 { // 책 정리[m
[1mdiff --git a/d1114/q14471.java b/d1114/q14471.java[m
[1mindex 9fc3c47..1ea56e5 100644[m
[1m--- a/d1114/q14471.java[m
[1m+++ b/d1114/q14471.java[m
[36m@@ -1,4 +1,5 @@[m
[31m-package d1114;[m
[32m+[m[32mpackage EDOC10.d1114;[m
[32m+[m
 import java.util.*; [m
 [m
 public class q14471 { // 포인트 카드[m
[1mdiff --git a/d1114/q14487.java b/d1114/q14487.java[m
[1mindex 804deea..4dc30ad 100644[m
[1m--- a/d1114/q14487.java[m
[1m+++ b/d1114/q14487.java[m
[36m@@ -1,4 +1,5 @@[m
[31m-package d1114;[m
[32m+[m[32mpackage EDOC10.d1114;[m
[32m+[m
 import java.util.*; [m
 [m
 public class q14487 { // 욱제는 효도쟁이야[m
[1mdiff --git a/d1114/q2720.java b/d1114/q2720.java[m
[1mindex 8a8660c..c5c1975 100644[m
[1m--- a/d1114/q2720.java[m
[1m+++ b/d1114/q2720.java[m
[36m@@ -1,4 +1,5 @@[m
[31m-package d1114;[m
[32m+[m[32mpackage EDOC10.d1114;[m
[32m+[m
 import java.util.*; [m
 [m
 public class q2720 { // 거스름돈[m
[1mdiff --git a/d1114/q2810.java b/d1114/q2810.java[m
[1mindex 1823d00..2094f71 100644[m
[1m--- a/d1114/q2810.java[m
[1m+++ b/d1114/q2810.java[m
[36m@@ -1,4 +1,5 @@[m
[31m-package d1114;[m
[32m+[m[32mpackage EDOC10.d1114;[m
[32m+[m
 import java.util.*; [m
 [m
 public class q2810 { // 컵홀더[m
[1mdiff --git a/d1114/q2930.java b/d1114/q2930.java[m
[1mindex dbc2a60..d07a6ac 100644[m
[1m--- a/d1114/q2930.java[m
[1m+++ b/d1114/q2930.java[m
[36m@@ -1,4 +1,5 @@[m
[31m-package d1114;[m
[32m+[m[32mpackage EDOC10.d1114;[m
[32m+[m
 import java.util.*; [m
 [m
 public class q2930 { // 가위바위보[m
[1mdiff --git a/d1121/q15720.java b/d1121/q15720.java[m
[1mindex 4a78ad1..ca52df3 100644[m
[1m--- a/d1121/q15720.java[m
[1m+++ b/d1121/q15720.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package d1121;[m
[32m+[m[32mpackage EDOC10.d1121;[m
 import java.util.*;[m
 [m
 public class q15720 { // https://www.acmicpc.net/problem/15720[m
[1mdiff --git a/d1121/q16173.java b/d1121/q16173.java[m
[1mindex dae75bf..1926df3 100644[m
[1m--- a/d1121/q16173.java[m
[1m+++ b/d1121/q16173.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package d1121;[m
[32m+[m[32mpackage EDOC10.d1121;[m
 [m
 import java.util.*;[m
 [m
[1mdiff --git a/d1121/q18228.java b/d1121/q18228.java[m
[1mindex 515f1fe..1faff43 100644[m
[1m--- a/d1121/q18228.java[m
[1m+++ b/d1121/q18228.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package d1121;[m
[32m+[m[32mpackage EDOC10.d1121;[m
 [m
 import java.util.*;[m
 [m
[1mdiff --git a/d1121/q19539.java b/d1121/q19539.java[m
[1mindex 8f78625..ace318e 100644[m
[1m--- a/d1121/q19539.java[m
[1m+++ b/d1121/q19539.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package d1121;[m
[32m+[m[32mpackage EDOC10.d1121;[m
 import java.util.*;[m
 [m
 public class q19539 { // 수정 필요[m
[1mdiff --git a/d1121/q19564.java b/d1121/q19564.java[m
[1mindex c4ca005..27a67eb 100644[m
[1m--- a/d1121/q19564.java[m
[1m+++ b/d1121/q19564.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package d1121;[m
[32m+[m[32mpackage EDOC10.d1121;[m
 import java.util.*;[m
 [m
 public class q19564 { // https://www.acmicpc.net/problem/19564[m
[1mdiff --git a/d1121/q2828.java b/d1121/q2828.java[m
[1mindex 7638f21..417a891 100644[m
[1m--- a/d1121/q2828.java[m
[1m+++ b/d1121/q2828.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package d1121;[m
[32m+[m[32mpackage EDOC10.d1121;[m
 import java.util.*;[m
 [m
 public class q2828 {[m
[1mdiff --git a/d1121/q9237.java b/d1121/q9237.java[m
[1mindex 93a4b4f..88b4320 100644[m
[1m--- a/d1121/q9237.java[m
[1m+++ b/d1121/q9237.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package d1121;[m
[32m+[m[32mpackage EDOC10.d1121;[m
 import java.util.*;[m
 [m
 public class q9237 { // 이장님 초대 https://www.acmicpc.net/problem/9237[m
